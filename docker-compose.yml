networks:
  ticket-system-network:
    driver: bridge

volumes:
  mysql-data:
  redis-data:
  uploads:

services:
  # MySQL数据库服务
  db:
    build:
      context: .
      dockerfile: docker/Dockerfile.db
    container_name: ticket-system-db
    networks:
      - ticket-system-network
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - MYSQL_DATABASE=ticketdb
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-p123456",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Redis服务
  redis:
    image: redis:7-alpine
    container_name: ticket-system-redis
    networks:
      - ticket-system-network
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # 后端服务
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: ticket-system-backend
    networks:
      - ticket-system-network
    volumes:
      - uploads:/app/uploads
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=123456
      - DB_NAME=ticketdb
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # 前端服务
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: ticket-system-web
    networks:
      - ticket-system-network
    ports:
      - "80:80"
    depends_on:
      - backend
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/",
        ]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
